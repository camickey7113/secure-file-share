<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P1 Writeup</title>
  <style>
    /* BEGIN CHANGES HERE */

    /* In this section, you may add CSS styling if desired */
    header {
      text-align: center;
    }

    .emph {
      font-style: italic;
    }

    /* END CHANGES HERE */
  </style>

<body>
  <header>
    <h1>CS 1653 Project P1 Writeup</h1>
    <h2>
      <!-- BEGIN CHANGES HERE -->

      <!-- END CHANGES HERE -->
    </h2>
  </header>
  <section id="group">
    <h2>1. Group Information</h2>
    <!-- BEGIN CHANGES HERE -->

    <p>
      Anita Kaul- ank249@pitt.edu<br>
      Gabrielle Martin- gjm55@pitt.edu<br>
      Cole Swierczek- cjs309@pitt.edu<br>
      Cam Mickey- cam597@pitt.edu<br>

    <h4>Development Process</h4>
    Our development process will consist of assigning elements of the framework to different team members. On a weekly
    basis, we plan to meet to discuss progress, resolve any integration issues, and help one another with bugs. We will
    set deadlines for deliverables in order to reach project milestones through the semester.

    Each member will be asked to review the following on a per meeting basis:

    <ul>
      <li>What was accomplished the previous week</li>
      <li>What will be accomplished in the next week</li>
      <li>Conflicts that were resolved</li>
      <li>Conflicts that are unresolved</li>
      <li>Integration needed in the coming week</li>
    </ul>

    The group will meet weekly on Wednesdays at 12-2PM unless stated otherwise.

    <h4>Organization</h4>
    Each member will be asked to review the following on a per meeting basis:
    <ul>
      <li>What was accomplished the previous week</li>
      <li>What will be accomplished in the next week</li>
      <li>Conflicts that were resolved</li>
      <li>Conflicts that are unresolved</li>
      <li>Integration needed in the coming week</li>
    </ul>
    The group will meet weekly on Wednesdays at 12-2PM unless stated otherwise.

    <h4>Strengths</h4>
    <p>
      Group has experience in Java, MySQL, and Maven. Members are familiar
      with database management systems, and all have completed operating systems. All
      members have experience in a professional environment doing group work.
    </p>

    <h4>Roles</h4>
    <ol>
      <li>Authentication server - database setup and user management</li>
      <li>Resource server - basic access, elevated access and setup for each</li>
      <li>Client side integration - Switching between Authentication and Resource servers</li>
    </ol>
    <ul>
      <li>Anita: Resource Server- Elevated access</li>
      <li>Gab: Authentication Server</li>
      <li>Cole: Client Side Integration</li>
      <li>Cam: Client Side Integration</li>
    </ul>

    <h4>Deadline Enforcement and Accountability</h4>
    <p>
      Each group member will be informed ahead of time what their responsibilities
      are for the week. If a group member thinks they will not be able to complete
      their tasks by the deadline, they will communicate this with the group, who
      will collectively decide how to manage the situation.
    </p>

    <h4>Dispute Management</h4>
    <p>
      Disputes will be attempted to be resolved among the group members, and will
      be taken to Professor Garrison if no resolution is found.
    </p>
    </p>

    <!-- END CHANGES HERE -->
  </section>
  <section id="design">
    <h2>2. Design Proposal</h2>
    <!-- BEGIN CHANGES HERE -->

    <h4>Overview</h4>
    Our group will be creating a file system that allows users to read, write, and execute files based on
    their permissions within the system. The authentication server will be used to determine or change a userâ€™s
    permissions. Resource servers will be used to distribute the file capabilities.

    <h4>Authentication Server</h4>
    The authentication server will be where all users and user permissions are managed. In
    addition, the authentication server will generate a token to send to the client side in order to determine which
    type of access (basic or elevated) the user can initiate. In this scenario, read is basic access, and write/execute
    are elevated access. The authentication server should also be able to handle permission changes and new users.

    <h4>Resource Server</h4>
    The resource server will store files that the users can access and modify based on metadata in
    keys provided by the client. The metadata will determine whether users can make, read, modify, move and execute
    files. It will then contain the functionalities for these processes. In addition, it will validate the token
    presented by the client.

    <h4>Client Side Integration</h4>
    The Client Side is responsible for relaying information between the Authentication Server
    and the Resource Servers.

    <p>Programming Language: Java</p>
    
    <p>Potential Frameworks: MySQL, H2, Post-Gresql, Springboot/Spring Initializr, JWT, OAuth2</p>


    <!-- END CHANGES HERE -->
  </section>
  <section id="properties">
    <h2>3. Security Properties</h2>
    <!-- BEGIN CHANGES HERE -->

    <ol>
      <li>File Access Confidentiality</li>
      <ul>
        <li>Property ensures that only authorized users can view contents in a file.</li>
        <li>This protects all private information stored in files from unauthorized access.</li>
        <li>It is assumed proper encryption and access control policies are enforced.</li>
      </ul>
      <li>Data Integrity Protection</li>
      <ul>
        <li>Property ensures that file data remains unaltered unless modified by an authorized user.</li>
        <li>This prevents corruption of data in files.</li>
        <li>It is assumed proper encryption takes place and relies on signatures for verification.</li>
      </ul>
      <li>Permission-Based File Authorization</li>
      <ul>
        <li>Property ensures that users only have permissions to perform authorized actions such as R, W, or X.</li>
        <li>This prevents unauthorized modifications on files.</li>
        <li>It is assumed the system has permission assignments.</li>
      </ul>
      <li>File Availability Assurance</li>
      <ul>
        <li>Property ensures that users can access files and resources when needed.</li>
        <li>This prevents disruptions in file accesses.</li>
        <li>It is assumed that the system is efficient in preventing system redundancies.</li>
      </ul>
      <li>Logging Data Accesses</li>
      <ul>
        <li>Property ensures that we have a log of who is accessing or modifying specific files.</li>
        <li>This allows us to see activity in the event of a security breach.</li>
        <li>This assumes that the system is capable of logging access and is secure to those with access.</li>
      </ul>
      <li>Physical Encryption of Data</li>
      <ul>
        <li>Property ensures that the data stored on the physical disk is encrypted.</li>
        <li>This allows us to be secure in the event of a physical breach of data.</li>
        <li>This assumes the system is securely stored in a location where the disk itself is unable to be stolen.</li>
      </ul>
      <li>Timed Access</li>
      <ul>
        <li>Property ensures that the user has a limited amount of time to access or modify files before they have to re-authenticate.</li>
        <li>This ensures that the user is re-authenticating often in the event that their work station is left unattended.</li>
        <li>This assumes that the system enforces authentication after a certain period of time.</li>
      </ul>
      <li>File Replication Consistency</li>
      <ul>
        <li>Property ensures that files are synchronized across all file locations so users are getting the most up to date version.</li>
        <li>This ensures that users all are modifying and accessing the same files across all locations.</li>
        <li>This assumes the system has a synchronization mechanism for files of the same name.</li>
      </ul>
      <li>No-Access Default</li>
      <ul>
        <li>By default, unless a user is recognized within the authentication server, they are not given a valid key or metadata</li>
        <li>Ensures that someone without explicit permission from authentication servers cannot access resources</li>
      </ul>
      <li>Brute-Force Protection</li>
      <ul>
        <li>Server should be able to handle multiple simultaneous accesses</li>
        <li>Server should employ the use of longer passwords and keys</li>
        <li>Ensures the resources required to deny availability or break encryption are much larger</li>
      </ul>
      <li>Record-Keeping</li>
      <ul>
        <li>Resource server keeps a log of accesses which have valid keys</li>
        <li>Authentication server keeps a log of login attempts</li>
        <li>Attacks that occur are recorded</li>
      </ul>
      <li>Log Protection/Encryption</li>
      <ul>
        <li>Logs of file access, read, write, executions, as well as authentication server logins, and resource server accesses are kept encrypted</li>
        <li>Ensures attackers cannot modify recordings of behavior</li>
      </ul>
      <li>Directory Access Confidentiality</li>
      <ul>
        <li>Ensures that only authorized users can view the contents of a directory.</li>
        <li>This prevents users from entering directories that they do not have access to.</li>
        <li>It is assumed proper encryption and access control policies are enforced.</li>
      </ul>
      <li>File Access Consistency</li>
      <ul>
        <li>Only one user will be able to access a file at a time.</li>
        <li>This prevents information from being overwritten or saves from being corrupted.</li>
        <li>This assumes file replication consistency exists.</li>
      </ul>
      <li>Public Algorithm Use</li>
      <ul>
        <li>Encryption, decryption, and authentication will rely on publicly available algorithms.</li>
        <li>This avoids the need to keep the algorithms a secret and instead allows the software to rely on secret parameters.</li>
        <li>This assumes the parameters used in the algorithms are kept a secret.</li>
      </ul>
      <li>Incorrect Login Confirmation</li>
      <ul>
        <li>When attempting to login as a user, messages about incorrect usernames and passwords will not provide any further information.</li>
        <li>This prevents attackers from confirming the existence of a username in the system.</li>
        <li>This assumes the system will provide an error message when an invalid login attempt is made.</li>
    </ol>

    <!-- END CHANGES HERE -->
  </section>
  <section id="references">
    <h2>4. References</h2>
    <!-- BEGIN CHANGES HERE -->

    https://www.geeksforgeeks.org/what-is-an-authentication-server/
    https://www.freecodecamp.org/news/oauth2-resourceserver-with-spring-security/
    https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2
    https://people.cs.pitt.edu/~bill/1653/#lecture
  
    <!-- END CHANGES HERE -->
  </section>
</body>

</html>